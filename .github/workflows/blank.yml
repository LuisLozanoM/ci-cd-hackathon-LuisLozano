# Streamlit App CI/CD Pipeline with Security Best Practices

name: Deploy Streamlit App to AWS

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Security: Limit permissions to minimum required
permissions:
  contents: read
  id-token: write # Required for OIDC

# Environment variables
env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }} # Your S3 bucket name

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Quality checks job
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest safety bandit

      # Linting with flake8
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Security scanning with bandit
      - name: Security scan with bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      # Check for known security vulnerabilities
      - name: Safety check for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      # Test the app (basic import test)
      - name: Test app imports
        run: |
          python -c "import streamlit; import os; from dotenv import load_dotenv; from st_files_connection import FilesConnection; print('All imports successful!')"

  # Deploy job (only runs after quality checks pass)
  deploy:
    needs: quality-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # Checks-out your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC (more secure than long-term keys)
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-StreamlitDeploy
          aws-region: us-east-1

      # Alternative: Use traditional secrets if OIDC is not set up yet
      # - name: Configure AWS credentials (fallback)
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Create environment file for the app
      - name: Create environment file
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=us-east-1" >> .env

      # Create deployment package
      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy application files
          cp app.py deployment/
          cp requirements.txt deployment/
          cp .env deployment/
          cp README.md deployment/ 2>/dev/null || echo "README.md not found, skipping"
          
          # Create a simple HTML wrapper for Streamlit (for static hosting)
          cat > deployment/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Streamlit App</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                  .container { max-width: 800px; margin: 0 auto; }
                  .info { background: #f0f8ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .code { background: #f5f5f5; padding: 15px; border-radius: 5px; font-family: monospace; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Streamlit App Deployment</h1>
                  <div class="info">
                      <h2>‚úÖ Deployment Successful!</h2>
                      <p>Your Streamlit application has been successfully deployed to AWS S3.</p>
                      <p><strong>Note:</strong> This is a static deployment. For a fully functional Streamlit app, you would need a server environment like EC2 or containers.</p>
                  </div>
                  
                  <h2>üìÅ Deployed Files:</h2>
                  <ul>
                      <li>app.py - Your Streamlit application</li>
                      <li>requirements.txt - Python dependencies</li>
                      <li>.env - Environment configuration</li>
                  </ul>
                  
                  <h2>üîß Application Code:</h2>
                  <div class="code">
                      <pre id="app-code">Loading app.py content...</pre>
                  </div>
                  
                  <h2>üì¶ Dependencies:</h2>
                  <div class="code">
                      <pre id="requirements">Loading requirements.txt...</pre>
                  </div>
                  
                  <h2>üöÄ Next Steps:</h2>
                  <p>To run this Streamlit app in a server environment:</p>
                  <ol>
                      <li>Deploy to AWS EC2, ECS, or AWS App Runner</li>
                      <li>Or run locally: <code>streamlit run app.py</code></li>
                  </ol>
              </div>
              
              <script>
                  // This would load the actual file contents in a real deployment
                  fetch('./app.py')
                      .then(response => response.text())
                      .then(text => {
                          document.getElementById('app-code').textContent = text;
                      })
                      .catch(() => {
                          document.getElementById('app-code').textContent = 'app.py file content would be displayed here';
                      });
                      
                  fetch('./requirements.txt')
                      .then(response => response.text())
                      .then(text => {
                          document.getElementById('requirements').textContent = text;
                      })
                      .catch(() => {
                          document.getElementById('requirements').textContent = 'requirements.txt content would be displayed here';
                      });
              </script>
          </body>
          </html>
          EOF

      # Deploy to S3
      - name: Deploy to S3
        run: |
          # Sync deployment directory to S3 bucket
          aws s3 sync deployment/ s3://${{ env.S3_BUCKET_NAME }} --delete --exact-timestamps
          
          # Set proper content types
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/index.html s3://${{ env.S3_BUCKET_NAME }}/index.html --content-type "text/html" --metadata-directive REPLACE
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/app.py s3://${{ env.S3_BUCKET_NAME }}/app.py --content-type "text/plain" --metadata-directive REPLACE
          aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/requirements.txt s3://${{ env.S3_BUCKET_NAME }}/requirements.txt --content-type "text/plain" --metadata-directive REPLACE

      # Configure S3 bucket for static website hosting
      - name: Configure S3 static website hosting
        run: |
          # Enable static website hosting
          aws s3 website s3://${{ env.S3_BUCKET_NAME }} --index-document index.html --error-document index.html
          
          # Set bucket policy for public read access (if needed)
          cat > bucket-policy.json << 'EOF'
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "PublicReadGetObject",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::${{ env.S3_BUCKET_NAME }}/*"
                  }
              ]
          }
          EOF
          
          # Apply bucket policy (uncomment if you want public access)
          # aws s3api put-bucket-policy --bucket ${{ env.S3_BUCKET_NAME }} --policy file://bucket-policy.json

      # Health check and output
      - name: Deployment summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìç S3 Bucket: ${{ env.S3_BUCKET_NAME }}"
          echo "üåê Website URL: http://${{ env.S3_BUCKET_NAME }}.s3-website-us-east-1.amazonaws.com"
          echo "üìÅ Files deployed:"
          aws s3 ls s3://${{ env.S3_BUCKET_NAME }} --recursive
          echo ""
          echo "Note: For a fully functional Streamlit app, consider deploying to:"
          echo "- AWS EC2 with auto-scaling"
          echo "- AWS ECS/Fargate with containers"
          echo "- AWS App Runner for serverless containers"
